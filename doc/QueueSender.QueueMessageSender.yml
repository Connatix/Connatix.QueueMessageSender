### YamlMime:ManagedReference
items:
- uid: QueueMessageSender.QueueMessageSender
  commentId: T:QueueMessageSender.QueueMessageSender
  id: QueueMessageSender
  parent: QueueMessageSender
  children:
  - QueueMessageSender.QueueMessageSender.#ctor(QueueMessageSender.QueueMessageSenderAppSettings,Microsoft.Extensions.Logging.ILogger)
  - QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.ChannelSpecificMessageHandler)
  - QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.CustomMessageHandler)
  - QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.GlobalMessageHandler)
  - QueueMessageSender.QueueMessageSender.Dispose
  - QueueMessageSender.QueueMessageSender.Enqueue(System.Object,System.String)
  - QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
  - QueueMessageSender.QueueMessageSender.FailedMessageCount
  - QueueMessageSender.QueueMessageSender.GetPendingMessageCount
  - QueueMessageSender.QueueMessageSender.SentMessageCount
  - QueueMessageSender.QueueMessageSender.SetChannelWeight(System.Single,System.String)
  - QueueMessageSender.QueueMessageSender.WaitForIdle
  langs:
  - csharp
  - vb
  name: QueueMessageSender
  nameWithType: QueueMessageSender
  fullName: QueueMessageSender.QueueMessageSender
  type: Class
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: QueueMessageSender
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 15
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis class provides a thread-safe mechanism to send messages to a external stream writer \nsuch as AWS Kinesis or RabbitMQ\n"
  example: []
  syntax:
    content: 'public class QueueMessageSender : IQueueMessageSender, IDisposable'
    content.vb: >-
      Public Class QueueMessageSender

          Implements IQueueMessageSender, IDisposable
  seealso:
  - linkId: System.IDisposable
    commentId: T:System.IDisposable
  inheritance:
  - System.Object
  implements:
  - QueueMessageSender.IQueueMessageSender
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: QueueMessageSender.QueueMessageSender.#ctor(QueueMessageSender.QueueMessageSenderAppSettings,Microsoft.Extensions.Logging.ILogger)
  commentId: M:QueueMessageSender.QueueMessageSender.#ctor(QueueMessageSender.QueueMessageSenderAppSettings,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(QueueMessageSender.QueueMessageSenderAppSettings,Microsoft.Extensions.Logging.ILogger)'
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: QueueMessageSender(QueueMessageSenderAppSettings, ILogger)
  nameWithType: QueueMessageSender.QueueMessageSender(QueueMessageSenderAppSettings, ILogger)
  fullName: QueueMessageSender.QueueMessageSender.QueueMessageSender(QueueMessageSender.QueueMessageSenderAppSettings, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: .ctor
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 44
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nInitializes a new instance of the <xref href=\"QueueMessageSender.QueueMessageSender\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public QueueMessageSender(QueueMessageSenderAppSettings settings, ILogger logger)
    parameters:
    - id: settings
      type: QueueMessageSender.QueueMessageSenderAppSettings
      description: ''
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: ''
    content.vb: Public Sub New(settings As QueueMessageSenderAppSettings, logger As ILogger)
  overload: QueueMessageSender.QueueMessageSender.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.GlobalMessageHandler)
  commentId: M:QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.GlobalMessageHandler)
  id: AddMessageHandler(QueueMessageSender.GlobalMessageHandler)
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: AddMessageHandler(GlobalMessageHandler)
  nameWithType: QueueMessageSender.AddMessageHandler(GlobalMessageHandler)
  fullName: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.GlobalMessageHandler)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: AddMessageHandler
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 60
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis function assigns a message handler for all the enqueued messages. For further details,\nsee <xref href=\"QueueMessageSender.GlobalMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> as the \n"
  example: []
  syntax:
    content: public void AddMessageHandler(GlobalMessageHandler msgHandler)
    parameters:
    - id: msgHandler
      type: QueueMessageSender.GlobalMessageHandler
      description: ''
    content.vb: Public Sub AddMessageHandler(msgHandler As GlobalMessageHandler)
  overload: QueueMessageSender.QueueMessageSender.AddMessageHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.ChannelSpecificMessageHandler)
  commentId: M:QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.ChannelSpecificMessageHandler)
  id: AddMessageHandler(QueueMessageSender.ChannelSpecificMessageHandler)
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: AddMessageHandler(ChannelSpecificMessageHandler)
  nameWithType: QueueMessageSender.AddMessageHandler(ChannelSpecificMessageHandler)
  fullName: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.ChannelSpecificMessageHandler)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: AddMessageHandler
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 90
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis function assigns a message handler for all the enqueued messages. For further details,\nsee <xref href=\"QueueMessageSender.ChannelSpecificMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> as the \n"
  example: []
  syntax:
    content: public void AddMessageHandler(ChannelSpecificMessageHandler msgHandler)
    parameters:
    - id: msgHandler
      type: QueueMessageSender.ChannelSpecificMessageHandler
      description: ''
    content.vb: Public Sub AddMessageHandler(msgHandler As ChannelSpecificMessageHandler)
  overload: QueueMessageSender.QueueMessageSender.AddMessageHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.CustomMessageHandler)
  commentId: M:QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.CustomMessageHandler)
  id: AddMessageHandler(QueueMessageSender.CustomMessageHandler)
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: AddMessageHandler(CustomMessageHandler)
  nameWithType: QueueMessageSender.AddMessageHandler(CustomMessageHandler)
  fullName: QueueMessageSender.QueueMessageSender.AddMessageHandler(QueueMessageSender.CustomMessageHandler)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: AddMessageHandler
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 119
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis function assigns a message handler for all the enqueued messages. For further details,\nsee <xref href=\"QueueMessageSender.CustomMessageHandler\" data-throw-if-not-resolved=\"false\"></xref> as the \n"
  example: []
  syntax:
    content: public void AddMessageHandler(CustomMessageHandler msgHandler)
    parameters:
    - id: msgHandler
      type: QueueMessageSender.CustomMessageHandler
      description: ''
    content.vb: Public Sub AddMessageHandler(msgHandler As CustomMessageHandler)
  overload: QueueMessageSender.QueueMessageSender.AddMessageHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.SentMessageCount
  commentId: P:QueueMessageSender.QueueMessageSender.SentMessageCount
  id: SentMessageCount
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: SentMessageCount
  nameWithType: QueueMessageSender.SentMessageCount
  fullName: QueueMessageSender.QueueMessageSender.SentMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: SentMessageCount
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 150
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of all messages that were successfully sent\n"
  remarks: "\nIf the configuration flag StatisticsEnabled is set to false then SentMessageCount value is 0\n"
  example: []
  syntax:
    content: public int SentMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SentMessageCount As Integer
  overload: QueueMessageSender.QueueMessageSender.SentMessageCount*
  implements:
  - QueueMessageSender.IQueueMessageSender.SentMessageCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
  commentId: P:QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
  id: EnqueuedMessageCount
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: EnqueuedMessageCount
  nameWithType: QueueMessageSender.EnqueuedMessageCount
  fullName: QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: EnqueuedMessageCount
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 162
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of the enqueued messages\n"
  remarks: "\nIf the configuration flag StatisticsEnabled is set to false then SentMessageCount value is 0\n"
  example: []
  syntax:
    content: public int EnqueuedMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property EnqueuedMessageCount As Integer
  overload: QueueMessageSender.QueueMessageSender.EnqueuedMessageCount*
  implements:
  - QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: QueueMessageSender.QueueMessageSender.FailedMessageCount
  commentId: P:QueueMessageSender.QueueMessageSender.FailedMessageCount
  id: FailedMessageCount
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: FailedMessageCount
  nameWithType: QueueMessageSender.FailedMessageCount
  fullName: QueueMessageSender.QueueMessageSender.FailedMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: FailedMessageCount
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 170
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of all messages that failed to be sent\n"
  remarks: "\nIf the configuration flag StatisticsEnabled is set to false then SentMessageCount value is 0\n"
  example: []
  syntax:
    content: public int FailedMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FailedMessageCount As Integer
  overload: QueueMessageSender.QueueMessageSender.FailedMessageCount*
  implements:
  - QueueMessageSender.IQueueMessageSender.FailedMessageCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: QueueMessageSender.QueueMessageSender.Enqueue(System.Object,System.String)
  commentId: M:QueueMessageSender.QueueMessageSender.Enqueue(System.Object,System.String)
  id: Enqueue(System.Object,System.String)
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: Enqueue(Object, String)
  nameWithType: QueueMessageSender.Enqueue(Object, String)
  fullName: QueueMessageSender.QueueMessageSender.Enqueue(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: Enqueue
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 177
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nEnqueues a message to be delivered to a named writer stream\n"
  example: []
  syntax:
    content: public void Enqueue(object message, string channelName)
    parameters:
    - id: message
      type: System.Object
      description: The payload.
    - id: channelName
      type: System.String
      description: Name of the channel.
    content.vb: Public Sub Enqueue(message As Object, channelName As String)
  overload: QueueMessageSender.QueueMessageSender.Enqueue*
  implements:
  - QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.SetChannelWeight(System.Single,System.String)
  commentId: M:QueueMessageSender.QueueMessageSender.SetChannelWeight(System.Single,System.String)
  id: SetChannelWeight(System.Single,System.String)
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: SetChannelWeight(Single, String)
  nameWithType: QueueMessageSender.SetChannelWeight(Single, String)
  fullName: QueueMessageSender.QueueMessageSender.SetChannelWeight(System.Single, System.String)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: SetChannelWeight
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 210
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nEach new channel has a default weight of 1. If you need to increase or decrease the threads allocated\nto a specific channel, use this function. The higher the number the more resources are dedicated to\na channel. Bear in mind that the MaxThreadCount setting (default is 2) is still considered. \n"
  example: []
  syntax:
    content: public void SetChannelWeight(float weight, string channelName)
    parameters:
    - id: weight
      type: System.Single
      description: ''
    - id: channelName
      type: System.String
      description: ''
    content.vb: Public Sub SetChannelWeight(weight As Single, channelName As String)
  overload: QueueMessageSender.QueueMessageSender.SetChannelWeight*
  implements:
  - QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.WaitForIdle
  commentId: M:QueueMessageSender.QueueMessageSender.WaitForIdle
  id: WaitForIdle
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: WaitForIdle()
  nameWithType: QueueMessageSender.WaitForIdle()
  fullName: QueueMessageSender.QueueMessageSender.WaitForIdle()
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: WaitForIdle
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 232
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nWaits for all the messages to be sent by the message handler\n"
  example: []
  syntax:
    content: public void WaitForIdle()
    content.vb: Public Sub WaitForIdle
  overload: QueueMessageSender.QueueMessageSender.WaitForIdle*
  implements:
  - QueueMessageSender.IQueueMessageSender.WaitForIdle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.Dispose
  commentId: M:QueueMessageSender.QueueMessageSender.Dispose
  id: Dispose
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: QueueMessageSender.Dispose()
  fullName: QueueMessageSender.QueueMessageSender.Dispose()
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: Dispose
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 247
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: QueueMessageSender.QueueMessageSender.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: QueueMessageSender.QueueMessageSender.GetPendingMessageCount
  commentId: M:QueueMessageSender.QueueMessageSender.GetPendingMessageCount
  id: GetPendingMessageCount
  parent: QueueMessageSender.QueueMessageSender
  langs:
  - csharp
  - vb
  name: GetPendingMessageCount()
  nameWithType: QueueMessageSender.GetPendingMessageCount()
  fullName: QueueMessageSender.QueueMessageSender.GetPendingMessageCount()
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/QueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: GetPendingMessageCount
    path: src/QueueMessageSender/QueueMessageSender.cs
    startLine: 461
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nGets the queue size all channels\n"
  example: []
  syntax:
    content: public int GetPendingMessageCount()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetPendingMessageCount As Integer
  overload: QueueMessageSender.QueueMessageSender.GetPendingMessageCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: QueueMessageSender
  commentId: N:QueueMessageSender
  name: QueueMessageSender
  nameWithType: QueueMessageSender
  fullName: QueueMessageSender
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: QueueMessageSender.IQueueMessageSender
  commentId: T:QueueMessageSender.IQueueMessageSender
  parent: QueueMessageSender
  name: IQueueMessageSender
  nameWithType: IQueueMessageSender
  fullName: QueueMessageSender.IQueueMessageSender
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: QueueMessageSender.QueueMessageSender
  commentId: T:QueueMessageSender.QueueMessageSender
  name: QueueMessageSender
  nameWithType: QueueMessageSender
  fullName: QueueMessageSender.QueueMessageSender
- uid: QueueMessageSender.QueueMessageSender.#ctor*
  commentId: Overload:QueueMessageSender.QueueMessageSender.#ctor
  name: QueueMessageSender
  nameWithType: QueueMessageSender.QueueMessageSender
  fullName: QueueMessageSender.QueueMessageSender.QueueMessageSender
- uid: QueueMessageSender.QueueMessageSenderAppSettings
  commentId: T:QueueMessageSender.QueueMessageSenderAppSettings
  parent: QueueMessageSender
  name: QueueMessageSenderAppSettings
  nameWithType: QueueMessageSenderAppSettings
  fullName: QueueMessageSender.QueueMessageSenderAppSettings
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: QueueMessageSender.GlobalMessageHandler
  commentId: T:QueueMessageSender.GlobalMessageHandler
  parent: QueueMessageSender
  name: GlobalMessageHandler
  nameWithType: GlobalMessageHandler
  fullName: QueueMessageSender.GlobalMessageHandler
- uid: QueueMessageSender.QueueMessageSender.AddMessageHandler*
  commentId: Overload:QueueMessageSender.QueueMessageSender.AddMessageHandler
  name: AddMessageHandler
  nameWithType: QueueMessageSender.AddMessageHandler
  fullName: QueueMessageSender.QueueMessageSender.AddMessageHandler
- uid: QueueMessageSender.ChannelSpecificMessageHandler
  commentId: T:QueueMessageSender.ChannelSpecificMessageHandler
  parent: QueueMessageSender
  name: ChannelSpecificMessageHandler
  nameWithType: ChannelSpecificMessageHandler
  fullName: QueueMessageSender.ChannelSpecificMessageHandler
- uid: QueueMessageSender.CustomMessageHandler
  commentId: T:QueueMessageSender.CustomMessageHandler
  parent: QueueMessageSender
  name: CustomMessageHandler
  nameWithType: CustomMessageHandler
  fullName: QueueMessageSender.CustomMessageHandler
- uid: QueueMessageSender.QueueMessageSender.SentMessageCount*
  commentId: Overload:QueueMessageSender.QueueMessageSender.SentMessageCount
  name: SentMessageCount
  nameWithType: QueueMessageSender.SentMessageCount
  fullName: QueueMessageSender.QueueMessageSender.SentMessageCount
- uid: QueueMessageSender.IQueueMessageSender.SentMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.SentMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  name: SentMessageCount
  nameWithType: IQueueMessageSender.SentMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.SentMessageCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: QueueMessageSender.QueueMessageSender.EnqueuedMessageCount*
  commentId: Overload:QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
  name: EnqueuedMessageCount
  nameWithType: QueueMessageSender.EnqueuedMessageCount
  fullName: QueueMessageSender.QueueMessageSender.EnqueuedMessageCount
- uid: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  name: EnqueuedMessageCount
  nameWithType: IQueueMessageSender.EnqueuedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
- uid: QueueMessageSender.QueueMessageSender.FailedMessageCount*
  commentId: Overload:QueueMessageSender.QueueMessageSender.FailedMessageCount
  name: FailedMessageCount
  nameWithType: QueueMessageSender.FailedMessageCount
  fullName: QueueMessageSender.QueueMessageSender.FailedMessageCount
- uid: QueueMessageSender.IQueueMessageSender.FailedMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.FailedMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  name: FailedMessageCount
  nameWithType: IQueueMessageSender.FailedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.FailedMessageCount
- uid: QueueMessageSender.QueueMessageSender.Enqueue*
  commentId: Overload:QueueMessageSender.QueueMessageSender.Enqueue
  name: Enqueue
  nameWithType: QueueMessageSender.Enqueue
  fullName: QueueMessageSender.QueueMessageSender.Enqueue
- uid: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  commentId: M:QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  parent: QueueMessageSender.IQueueMessageSender
  isExternal: true
  name: Enqueue(Object, String)
  nameWithType: IQueueMessageSender.Enqueue(Object, String)
  fullName: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object, System.String)
  spec.csharp:
  - uid: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
    name: Enqueue
    nameWithType: IQueueMessageSender.Enqueue
    fullName: QueueMessageSender.IQueueMessageSender.Enqueue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
    name: Enqueue
    nameWithType: IQueueMessageSender.Enqueue
    fullName: QueueMessageSender.IQueueMessageSender.Enqueue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: QueueMessageSender.QueueMessageSender.SetChannelWeight*
  commentId: Overload:QueueMessageSender.QueueMessageSender.SetChannelWeight
  name: SetChannelWeight
  nameWithType: QueueMessageSender.SetChannelWeight
  fullName: QueueMessageSender.QueueMessageSender.SetChannelWeight
- uid: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  commentId: M:QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  parent: QueueMessageSender.IQueueMessageSender
  isExternal: true
  name: SetChannelWeight(Single, String)
  nameWithType: IQueueMessageSender.SetChannelWeight(Single, String)
  fullName: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single, System.String)
  spec.csharp:
  - uid: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
    name: SetChannelWeight
    nameWithType: IQueueMessageSender.SetChannelWeight
    fullName: QueueMessageSender.IQueueMessageSender.SetChannelWeight
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
    name: SetChannelWeight
    nameWithType: IQueueMessageSender.SetChannelWeight
    fullName: QueueMessageSender.IQueueMessageSender.SetChannelWeight
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: QueueMessageSender.QueueMessageSender.WaitForIdle*
  commentId: Overload:QueueMessageSender.QueueMessageSender.WaitForIdle
  name: WaitForIdle
  nameWithType: QueueMessageSender.WaitForIdle
  fullName: QueueMessageSender.QueueMessageSender.WaitForIdle
- uid: QueueMessageSender.IQueueMessageSender.WaitForIdle
  commentId: M:QueueMessageSender.IQueueMessageSender.WaitForIdle
  parent: QueueMessageSender.IQueueMessageSender
  name: WaitForIdle()
  nameWithType: IQueueMessageSender.WaitForIdle()
  fullName: QueueMessageSender.IQueueMessageSender.WaitForIdle()
  spec.csharp:
  - uid: QueueMessageSender.IQueueMessageSender.WaitForIdle
    name: WaitForIdle
    nameWithType: IQueueMessageSender.WaitForIdle
    fullName: QueueMessageSender.IQueueMessageSender.WaitForIdle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: QueueMessageSender.IQueueMessageSender.WaitForIdle
    name: WaitForIdle
    nameWithType: IQueueMessageSender.WaitForIdle
    fullName: QueueMessageSender.IQueueMessageSender.WaitForIdle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: QueueMessageSender.QueueMessageSender.Dispose*
  commentId: Overload:QueueMessageSender.QueueMessageSender.Dispose
  name: Dispose
  nameWithType: QueueMessageSender.Dispose
  fullName: QueueMessageSender.QueueMessageSender.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: QueueMessageSender.QueueMessageSender.GetPendingMessageCount*
  commentId: Overload:QueueMessageSender.QueueMessageSender.GetPendingMessageCount
  name: GetPendingMessageCount
  nameWithType: QueueMessageSender.GetPendingMessageCount
  fullName: QueueMessageSender.QueueMessageSender.GetPendingMessageCount
