### YamlMime:ManagedReference
items:
- uid: QueueMessageSender.IQueueMessageSender
  commentId: T:QueueMessageSender.IQueueMessageSender
  id: IQueueMessageSender
  parent: QueueMessageSender
  children:
  - QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  - QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  - QueueMessageSender.IQueueMessageSender.FailedMessageCount
  - QueueMessageSender.IQueueMessageSender.SentMessageCount
  - QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  - QueueMessageSender.IQueueMessageSender.WaitForIdle
  langs:
  - csharp
  - vb
  name: IQueueMessageSender
  nameWithType: IQueueMessageSender
  fullName: QueueMessageSender.IQueueMessageSender
  type: Interface
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: IQueueMessageSender
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 7
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis interface is the abstraction of the QueueMessageSender class \n"
  example: []
  syntax:
    content: 'public interface IQueueMessageSender : IDisposable'
    content.vb: >-
      Public Interface IQueueMessageSender

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  id: EnqueuedMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: EnqueuedMessageCount
  nameWithType: IQueueMessageSender.EnqueuedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: EnqueuedMessageCount
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 12
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of the enqueued messages\n"
  example: []
  syntax:
    content: int EnqueuedMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property EnqueuedMessageCount As Integer
  overload: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: QueueMessageSender.IQueueMessageSender.SentMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.SentMessageCount
  id: SentMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: SentMessageCount
  nameWithType: IQueueMessageSender.SentMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.SentMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: SentMessageCount
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 17
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of all messages that were successfully sent\n"
  example: []
  syntax:
    content: int SentMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property SentMessageCount As Integer
  overload: QueueMessageSender.IQueueMessageSender.SentMessageCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: QueueMessageSender.IQueueMessageSender.FailedMessageCount
  commentId: P:QueueMessageSender.IQueueMessageSender.FailedMessageCount
  id: FailedMessageCount
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: FailedMessageCount
  nameWithType: IQueueMessageSender.FailedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.FailedMessageCount
  type: Property
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: FailedMessageCount
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 22
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nThis field keeps the count of all messages that failed to be sent\n"
  example: []
  syntax:
    content: int FailedMessageCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property FailedMessageCount As Integer
  overload: QueueMessageSender.IQueueMessageSender.FailedMessageCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  commentId: M:QueueMessageSender.IQueueMessageSender.Enqueue(System.Object,System.String)
  id: Enqueue(System.Object,System.String)
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: Enqueue(Object, String)
  nameWithType: IQueueMessageSender.Enqueue(Object, String)
  fullName: QueueMessageSender.IQueueMessageSender.Enqueue(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: Enqueue
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 29
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nEnqueues a message to be delivered to a named writer stream\n"
  example: []
  syntax:
    content: void Enqueue(object message, string channelName)
    parameters:
    - id: message
      type: System.Object
      description: The payload.
    - id: channelName
      type: System.String
      description: Name of the channel.
    content.vb: Sub Enqueue(message As Object, channelName As String)
  overload: QueueMessageSender.IQueueMessageSender.Enqueue*
- uid: QueueMessageSender.IQueueMessageSender.WaitForIdle
  commentId: M:QueueMessageSender.IQueueMessageSender.WaitForIdle
  id: WaitForIdle
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: WaitForIdle()
  nameWithType: IQueueMessageSender.WaitForIdle()
  fullName: QueueMessageSender.IQueueMessageSender.WaitForIdle()
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: WaitForIdle
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 34
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nWaits for all the messages to be sent by the message handler\n"
  example: []
  syntax:
    content: void WaitForIdle()
    content.vb: Sub WaitForIdle
  overload: QueueMessageSender.IQueueMessageSender.WaitForIdle*
- uid: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  commentId: M:QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single,System.String)
  id: SetChannelWeight(System.Single,System.String)
  parent: QueueMessageSender.IQueueMessageSender
  langs:
  - csharp
  - vb
  name: SetChannelWeight(Single, String)
  nameWithType: IQueueMessageSender.SetChannelWeight(Single, String)
  fullName: QueueMessageSender.IQueueMessageSender.SetChannelWeight(System.Single, System.String)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender/IQueueMessageSender.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: SetChannelWeight
    path: src/QueueMessageSender/IQueueMessageSender.cs
    startLine: 43
  assemblies:
  - QueueMessageSender
  namespace: QueueMessageSender
  summary: "\nEach new channel has a default weight of 1. If you need to increase or decrease the threads allocated\nto a specific channel, use this function. The higher the number the more resources are dedicated to\na channel. Bear in mind that the MaxThreadCount setting (default is 2) is still considered. \n"
  example: []
  syntax:
    content: void SetChannelWeight(float weight, string channelName)
    parameters:
    - id: weight
      type: System.Single
      description: ''
    - id: channelName
      type: System.String
      description: ''
    content.vb: Sub SetChannelWeight(weight As Single, channelName As String)
  overload: QueueMessageSender.IQueueMessageSender.SetChannelWeight*
references:
- uid: QueueMessageSender
  commentId: N:QueueMessageSender
  name: QueueMessageSender
  nameWithType: QueueMessageSender
  fullName: QueueMessageSender
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
  name: EnqueuedMessageCount
  nameWithType: IQueueMessageSender.EnqueuedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.EnqueuedMessageCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: QueueMessageSender.IQueueMessageSender.SentMessageCount*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.SentMessageCount
  name: SentMessageCount
  nameWithType: IQueueMessageSender.SentMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.SentMessageCount
- uid: QueueMessageSender.IQueueMessageSender.FailedMessageCount*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.FailedMessageCount
  name: FailedMessageCount
  nameWithType: IQueueMessageSender.FailedMessageCount
  fullName: QueueMessageSender.IQueueMessageSender.FailedMessageCount
- uid: QueueMessageSender.IQueueMessageSender.Enqueue*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.Enqueue
  name: Enqueue
  nameWithType: IQueueMessageSender.Enqueue
  fullName: QueueMessageSender.IQueueMessageSender.Enqueue
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: QueueMessageSender.IQueueMessageSender.WaitForIdle*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.WaitForIdle
  name: WaitForIdle
  nameWithType: IQueueMessageSender.WaitForIdle
  fullName: QueueMessageSender.IQueueMessageSender.WaitForIdle
- uid: QueueMessageSender.IQueueMessageSender.SetChannelWeight*
  commentId: Overload:QueueMessageSender.IQueueMessageSender.SetChannelWeight
  name: SetChannelWeight
  nameWithType: IQueueMessageSender.SetChannelWeight
  fullName: QueueMessageSender.IQueueMessageSender.SetChannelWeight
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
