### YamlMime:ManagedReference
items:
- uid: QueueMessageSender.Tests.IProxy
  commentId: T:QueueMessageSender.Tests.IProxy
  id: IProxy
  parent: QueueMessageSender.Tests
  children:
  - QueueMessageSender.Tests.IProxy.WriteAsync(System.Collections.Generic.List{QueueMessageSender.Message},System.String)
  langs:
  - csharp
  - vb
  name: IProxy
  nameWithType: IProxy
  fullName: QueueMessageSender.Tests.IProxy
  type: Interface
  source:
    remote:
      path: src/QueueMessageSender.Tests/IProxy.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: IProxy
    path: src/QueueMessageSender.Tests/IProxy.cs
    startLine: 6
  assemblies:
  - QueueMessageSender.Tests
  namespace: QueueMessageSender.Tests
  syntax:
    content: 'public interface IProxy : IDisposable'
    content.vb: >-
      Public Interface IProxy

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: QueueMessageSender.Tests.IProxy.WriteAsync(System.Collections.Generic.List{QueueMessageSender.Message},System.String)
  commentId: M:QueueMessageSender.Tests.IProxy.WriteAsync(System.Collections.Generic.List{QueueMessageSender.Message},System.String)
  id: WriteAsync(System.Collections.Generic.List{QueueMessageSender.Message},System.String)
  parent: QueueMessageSender.Tests.IProxy
  langs:
  - csharp
  - vb
  name: WriteAsync(List<Message>, String)
  nameWithType: IProxy.WriteAsync(List<Message>, String)
  fullName: QueueMessageSender.Tests.IProxy.WriteAsync(System.Collections.Generic.List<QueueMessageSender.Message>, System.String)
  type: Method
  source:
    remote:
      path: src/QueueMessageSender.Tests/IProxy.cs
      branch: master
      repo: git@github.com:Connatix/QueueMessageSender.git
    id: WriteAsync
    path: src/QueueMessageSender.Tests/IProxy.cs
    startLine: 8
  assemblies:
  - QueueMessageSender.Tests
  namespace: QueueMessageSender.Tests
  syntax:
    content: Task<List<Message>> WriteAsync(List<Message> messages, string streamName)
    parameters:
    - id: messages
      type: System.Collections.Generic.List{QueueMessageSender.Message}
    - id: streamName
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{QueueMessageSender.Message}}
    content.vb: Function WriteAsync(messages As List(Of Message), streamName As String) As Task(Of List(Of Message))
  overload: QueueMessageSender.Tests.IProxy.WriteAsync*
  nameWithType.vb: IProxy.WriteAsync(List(Of Message), String)
  fullName.vb: QueueMessageSender.Tests.IProxy.WriteAsync(System.Collections.Generic.List(Of QueueMessageSender.Message), System.String)
  name.vb: WriteAsync(List(Of Message), String)
references:
- uid: QueueMessageSender.Tests
  commentId: N:QueueMessageSender.Tests
  name: QueueMessageSender.Tests
  nameWithType: QueueMessageSender.Tests
  fullName: QueueMessageSender.Tests
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: QueueMessageSender.Tests.IProxy.WriteAsync*
  commentId: Overload:QueueMessageSender.Tests.IProxy.WriteAsync
  name: WriteAsync
  nameWithType: IProxy.WriteAsync
  fullName: QueueMessageSender.Tests.IProxy.WriteAsync
- uid: System.Collections.Generic.List{QueueMessageSender.Message}
  commentId: T:System.Collections.Generic.List{QueueMessageSender.Message}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Message>
  nameWithType: List<Message>
  fullName: System.Collections.Generic.List<QueueMessageSender.Message>
  nameWithType.vb: List(Of Message)
  fullName.vb: System.Collections.Generic.List(Of QueueMessageSender.Message)
  name.vb: List(Of Message)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: QueueMessageSender.Message
    name: Message
    nameWithType: Message
    fullName: QueueMessageSender.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: QueueMessageSender.Message
    name: Message
    nameWithType: Message
    fullName: QueueMessageSender.Message
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{QueueMessageSender.Message}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{QueueMessageSender.Message}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<Message>>
  nameWithType: Task<List<Message>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<QueueMessageSender.Message>>
  nameWithType.vb: Task(Of List(Of Message))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of QueueMessageSender.Message))
  name.vb: Task(Of List(Of Message))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: QueueMessageSender.Message
    name: Message
    nameWithType: Message
    fullName: QueueMessageSender.Message
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: QueueMessageSender.Message
    name: Message
    nameWithType: Message
    fullName: QueueMessageSender.Message
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
